# Python Code using Jupiter in anaconda IDE to solve an Equation in Newton's method (Jacobian)

from sympy import *
from sympy.interactive import printing
printing.init_printing(use_latex=True)

#x+xy=2
#x+y=2
x,y=symbols('x y')

f1 = x + x * y - 2
print("First Equation:\nf1= ")
display(f1)

f2 = x + y - 2
print("Second Equation:\nf2= ")
display(f2)

F = Matrix([[f1], [f2]])
print("the Two Equations as an F Matrix:\nF= ")
display(F)

print("df1/dx= ")
der_x = diff(f1, x)
display(der_x)

print("df1/dy= ")
der_y = diff(f1, y)
display(der_y)

print("df2/dx= ")
der_x2 = diff(f2, x)
display(der_x2)

print("df2/dy= ")
der_y2 = diff(f2, y)
display(der_y2)

print("Jacobian is:\nJ= ")
J = Matrix([[der_x, der_y], [der_x2, der_y2]])
display(J)

print("Jacobian inverse is:\nj_inv= ")
j_inv = 1 / ((der_x * der_y2) - (der_y * der_x2)) * Matrix([[der_y2, -der_y], [-der_x2, der_x]])
display(j_inv)

# Given
x = 3
y = -1
print("Given Matrix to compensate is:\ng= ")
g = Matrix([[x], [y]])
display(g)

for k in range(0, 3):
    display(f"x = {x}, y = {y}")
    g = g - j_inv.subs({'x': x, 'y': y}) * F.subs({'x': x, 'y': y})
    x, y = g
print(f"Final Matrix = \n")
display(f"x = {x}, y = {y}")
#display(g)